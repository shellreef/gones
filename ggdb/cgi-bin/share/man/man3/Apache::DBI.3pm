.\" Automatically generated by Pod::Man version 1.15
.\" Tue Apr  1 15:23:59 2003
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "DBI 3"
.TH DBI 3 "perl v5.6.1" "2003-02-17" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Apache::DBI \- Initiate a persistent database connection
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # Configuration in httpd.conf or startup.pl:
.Ve
.Vb 1
\& PerlModule Apache::DBI  # this comes before all other modules using DBI
.Ve
Do \s-1NOT\s0 change anything in your scripts. The usage of this module is 
absolutely transparent !
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module initiates a persistent database connection. 
.PP
The database access uses Perl's \s-1DBI\s0. For supported \s-1DBI\s0 drivers see: 
.PP
.Vb 1
\& http://dbi.perl.org/
.Ve
When loading the \s-1DBI\s0 module (do not confuse this with the Apache::DBI module) 
it looks if the environment variable \s-1GATEWAY_INTERFACE\s0 starts with 'CGI-Perl' 
and if the module Apache::DBI has been loaded. In this case every connect 
request will be forwarded to the Apache::DBI module. This looks if a database 
handle from a previous connect request is already stored and if this handle is 
still valid using the ping method. If these two conditions are fulfilled it 
just returns the database handle. The parameters defining the connection have 
to be exactly the same, including the connect attributes! If there is no 
appropriate database handle or if the ping method fails, a new connection is 
established and the handle is stored for later re-use. There is no need to 
remove the disconnect statements from your code. They won't do anything because 
the Apache::DBI module overloads the disconnect method. 
.PP
The Apache::DBI module still has a limitation: it keeps database connections 
persistent on a per process basis. The problem is, if a user accesses several 
times a database, the http requests will be handled very likely by different 
servers. Every server needs to do its own connect. It would be nice, if all 
servers could share the database handles. Currently this is not possible, 
because of the distinct name-space of every process. Also it is not possible 
to create a database handle upon startup of the httpd and then inheriting this 
handle to every subsequent server. This will cause clashes when the handle is 
used by two processes at the same time. 
.PP
With this limitation in mind, there are scenarios, where the usage of 
Apache::DBI is depreciated. Think about a heavy loaded Web-site where every 
user connects to the database with a unique userid. Every server would create  
many database handles each of which spawning a new backend process. In a short 
time this would kill the web server. 
.PP
Another problem are timeouts: some databases disconnect the client after a 
certain time of inactivity. The module tries to validate the database handle 
using the ping-method of the DBI-module. This method returns true as default. 
If the database handle is not valid and the driver has no implementation for 
the ping method, you will get an error when accessing the database. As a 
work-around you can try to replace the ping method by any database command, 
which is cheap and safe or you can deactivate the usage of the ping method 
(see \s-1CONFIGURATION\s0 below). 
.PP
Here is generalized ping method, which can be added to the driver module:
.PP
{   package \s-1DBD:\s0:xxx::db; # ====== \s-1DATABASE\s0 ======
    use strict;
.PP
.Vb 12
\&    sub ping {
\&        my($dbh) = @_;
\&        my $ret = 0;
\&        eval {
\&            local $SIG{__DIE__}  = sub { return (0); };
\&            local $SIG{__WARN__} = sub { return (0); };
\&            # adapt the select statement to your database:
\&            $ret = $dbh->do('select 1');
\&        };
\&        return ($@) ? 0 : $ret;
\&    }
\&}
.Ve
Transactions: a standard \s-1DBI\s0 script will automatically perform a rollback
whenever the script exits. In the case of persistent database connections,
the database handle will not be destroyed and hence no automatic rollback 
occurs. At a first glance it seems even to be possible, to handle a transaction 
over multiple requests. But this should be avoided, because different
requests are handled by different servers and a server does not know the state 
of a specific transaction which has been started by another server. In general 
it is good practice to perform an explicit commit or rollback at the end of 
every script. In order to avoid inconsistencies in the database in case 
AutoCommit is off and the script finishes without an explicit rollback, the 
Apache::DBI module uses a PerlCleanupHandler to issue a rollback at the
end of every request. Note, that this CleanupHandler will only be used, if 
the initial data_source sets AutoCommit = 0. It will not be used, if AutoCommit 
will be turned off, after the connect has been done. 
.PP
This module plugs in a menu item for Apache::Status. The menu lists the 
current database connections. It should be considered incomplete because of 
the limitations explained above. It shows the current database connections 
for one specific server, the one which happens to serve the current request. 
Other servers might have other database connections. The Apache::Status module 
has to be loaded before the Apache::DBI module !
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
The module should be loaded upon startup of the Apache daemon.
Add the following line to your httpd.conf or startup.pl:
.PP
.Vb 1
\& PerlModule Apache::DBI
.Ve
It is important, to load this module before any other modules using \s-1DBI\s0 ! 
.PP
A common usage is to load the module in a startup file via the PerlRequire 
directive. See eg/startup.pl for an example. 
.PP
There are two configurations which are server-specific and which can be done 
upon server startup: 
.PP
.Vb 1
\& Apache::DBI->connect_on_init($data_source, $username, $auth, \e%attr)
.Ve
This can be used as a simple way to have apache servers establish connections 
on process startup. 
.PP
.Vb 1
\& Apache::DBI->setPingTimeOut($data_source, $timeout)
.Ve
This configures the usage of the ping method, to validate a connection. 
Setting the timeout to 0 will always validate the database connection 
using the ping method (default). Setting the timeout < 0 will de-activate 
the validation of the database handle. This can be used for drivers, which 
do not implement the ping-method. Setting the timeout > 0 will ping the 
database only if the last access was more than timeout seconds before. 
.PP
For the menu item '\s-1DBI\s0 connections' you need to call Apache::Status \s-1BEFORE\s0 
Apache::DBI ! For an example of the configuration order see startup.pl. 
.PP
To enable debugging the variable \f(CW$Apache::DBI::DEBUG\fR must be set. This 
can either be done in startup.pl or in the user script. Setting the variable 
to 1, just reports about a new connect. Setting the variable to 2 enables full 
debug output. 
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
Note that this module needs mod_perl-1.08 or higher, apache_1.3.0 or higher 
and that mod_perl needs to be configured with the appropriate call-back hooks: 
.PP
.Vb 1
\&  PERL_CHILD_INIT=1 PERL_STACKED_HANDLERS=1.
.Ve
.SH "MOD_PERL 2.0"
.IX Header "MOD_PERL 2.0"
Apache::DBI version 0.90_02 and later might work under mod_perl 2.0.
See the Changes file for more information.  Also beware that it has
only been tested very lightly.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the Apache manpage, the mod_perl manpage, the DBI manpage
.SH "AUTHORS"
.IX Header "AUTHORS"
.Ip "\(bu Apache::DBI by Edmund Mergl (now supported and maintained by the modperl mailinglist, see the mod_perl documentation for instructions on how to subscribe)."
.IX Item "Apache::DBI by Edmund Mergl (now supported and maintained by the modperl mailinglist, see the mod_perl documentation for instructions on how to subscribe)."
.PD 0
.Ip "\(bu mod_perl by Doug MacEachern."
.IX Item "mod_perl by Doug MacEachern."
.Ip "\(bu \s-1DBI\s0 by Tim Bunce <dbi-users-subscribe@perl.org>"
.IX Item "DBI by Tim Bunce <dbi-users-subscribe@perl.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The Apache::DBI module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
