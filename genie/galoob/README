Galoob's Official Game Genie Codes
JC20110104

nev9.txt - final official codebook, 481 games, from http://www.gshi.org/ugetab/RoughGenie/gg_nes.html

Files from http://www.nesworld.com/genie.php:
nev8.txt - codebook released online by Galoob (1994), 456 games. No game introduction text.
 Despite the comments on http://www.nesworld.com/genie.php, this is not the final version
neup01.txt - update volume 1 #1 (1993)
neup02.txt - update volume 1 #2
neup03.txt - update volume 1 #3 
neup04.txt - update volume 1 #4 
neup05.txt - update volume 2 #1 
necd5.txt  - update volume 2 #2 
neup07.txt - update volume 2 #3 
neup08.txt - update volume 2 #4
None of these show the category for each code.

Photographs of official codebook from 1991:
http://www.flickr.com/search/?q=game%20genie&w=60991646%40N00
This is the most in-depth information on the codes, including categories and notes,
not available elsewhere, but it does not include the code updates.

gamelist-gg.csv - listing all games Galoob made official Game Genie codes for, along 
    with the abbreviation used for the game (SMB3 etc.), which would almost
    be useful, but is not unique (MEGA is for multiple Mega Man games, and more).
    But this file is a comprehensive list of all GG games, easily parseable.
gamelist-goodnes314.csv - list of all games in "iMac:GoodNES 3.14 (Goodmerged by Xervils)"
gg2gn.csv - file mapping what Galoob calls each game to what GoodNES calls it
    Galoob sometimes doesn't use the full name of the game, and has superfluous
    (tm)s, and in one case a misspelling (Squoon should be Sqoon, easy mistake), so
    this file maps to the real names of the games for authoritive reference.


Analysis
TODO: first, classify all the codes by their official category from the codebook,
and save in a computer-readable format. There are some complexities here:
1. need to manually categorize codes from visual inspection of photographs (easy, but tedious)
2. multiple codes ("GOEANKAO + USEEEKKA") per effect, must be supported
3. alternate codes "YESUAPTE / YESLPPTE"
3a. find alternate versions, and tag codes by hash of ROM that they are expected to work on
 i.e., PRG0 or PRG1 (+hash), along with name
4. decode all codes
5. find ROM offset of all codes
6. disassemble and show instruction(s) modified
6a. can start at different offsets, so can guess to find out, but execution is most reliable
